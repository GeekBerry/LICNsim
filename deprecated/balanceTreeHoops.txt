def balanceTreeApproach(center, dstnode):#->nextpath
    prefix= commonPrefix(center, dstnode)

    if len(prefix) == len(center):# center是dstnode的根节点
        if len(dstnode) == len(center):
            return None # center == dstnode
        else:
            return tuple( dstnode[0:len(center)+1] ) #靠dstnode近1步
    else:
        return tuple( center[0:-1] ) #center的根节点


def balanceTreeHoops(center, degree, height)->list: #list[ point, ...]
    """
                             ( )
                          /   |  \
                      /       |       \
                 /            |            \
           (0,)center       (1,)               (2,)
         /  |  \           /  |  \           /  |  \
        /   |   \         /   |   \         /   |   \
       /    |    \       /    |    \       /    |    \
    (0,0) (0,1) (0,2) (1,0) (1,1) (1,2) (2,0) (2,1) (2,2)

    for i in balanceTreeHoops( (0,), 3, 2 ):
        print(i)
    输出:
    [(0,)]
    [(0, 0), (0, 1), (0, 2), ()]
    [(1,), (2,)]
    [(1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]
    """
    def inside(point):
        return 0<=len(point)<=height

    def outerPoints(point):
        outer_hoop= [ point+(i,) for i in range(0, degree)]
        if len(point) > 0:# is not ROOT
            outer_hoop.append( point[0:-1] )

        inner= balanceTreeApproach(point, center)
        if inner in outer_hoop:
            outer_hoop.remove( inner )

        return outer_hoop

    def outerHoop(hoop):
        outerpoints=[]
        for point in hoop:
            outerpoints.extend( outerPoints(point) )
        return outerpoints

    hoop= [center]
    while hoop:
        yield hoop
        outer= outerHoop( hoop )
        hoop= [   point   for point in outer  if inside(point)  ]
