# class GridUniform:
#     def __init__(self, size, *args, **kwargs):
#         self.size= size
#
#         self.nodes= []# size * size 的网格
#         for r in range(0, size):
#             for c in range(0, size):
#                 self.nodes.append( (r,c) )
#
#     def __call__(self, num):
#         return random.sample( self.nodes, num )
#
#
# class GridPower:
#     """
#     当d<=a时, 在第一象限三角形中挑距离为d的点
#     当a<d<2a时, 在第一象限三角形中挑距离为d-a的点n, 则点 ( n(x)-a, n(y)-a )与原点距离为d
#     a  * * * 3 * * *
#     |  * * * 2 3 * *
#     |  * * * 1 2 3 *
#     0  * * * 0 1 2 3
#     |  -2* * * * * *
#     |  -1-2* * * * *
#     -a -0-1-2* * * *
#       -a_____0_____a
#     """
#     def __init__(self, size, alpha=0.8):
#         self.size= size
#         self.a= self.size//2
#         self.offset= numpy.array( [self.a, self.a] )
#         self.alpha= alpha# 指数值
#
#     def __call__(self, num):
#         distance= int( self.size * numpy.random.power(self.alpha) )
#         return [  tuple( self.hoopPoint(distance) ) for i in range(0, num)  ]
#
#     def hoopPoint(self, d):# 在方形图上
#         if d <= self.a:
#             dx= random.randint(0, d)
#             node= numpy.array( [dx, d-dx] )
#         elif self.a < d < self.size:
#             dx= random.randint( 0, d-self.a )
#             node= numpy.array( [dx, d-dx] ) - self.offset
#         else:
#             raise RuntimeWarning("d > size")
#         return node * random.choice([(-1, -1), (-1, 1), (1, -1), (1, 1)]) + self.offset
